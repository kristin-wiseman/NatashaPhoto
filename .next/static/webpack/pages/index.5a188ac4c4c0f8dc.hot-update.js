"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Homepage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ \"./node_modules/@fortawesome/react-fontawesome/index.es.js\");\n/* harmony import */ var react_photo_album__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-photo-album */ \"./node_modules/react-photo-album/dist/index.esm.js\");\n/* harmony import */ var _components_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/layout */ \"./components/layout.js\");\n/* harmony import */ var _public_images_DSC_0006_jpg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../public/images/DSC_0006.jpg */ \"./public/images/DSC_0006.jpg\");\n\n\n\n\n\n\n\n\n\n\n\nvar photos = [\n    {\n        src: \"/public/images/DSC_0001.JPG\",\n        width: 3872,\n        height: 2592\n    },\n    {\n        src: \"/public/images/DSC_0006.JPG\",\n        width: 2592,\n        height: 2592\n    },\n    {\n        src: \"/public/images/DSC_0009.JPG\",\n        width: 2592,\n        height: 3872\n    },\n    {\n        src: \"/public/images/DSC_0022.JPG\",\n        width: 3872,\n        height: 2592\n    },\n    {\n        src: \"/public/images/DSC_0029.JPG\",\n        width: 2592,\n        height: 3872\n    },\n    {\n        src: \"/public/images/DSC_0051.JPG\",\n        width: 2592,\n        height: 2592\n    },\n    {\n        src: \"/public/images/DSC_0078.JPG\",\n        width: 2592,\n        height: 3872\n    }\n];\nfunction Homepage() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_4___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                    children: \"Natasha Photography\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Kristin\\\\NatashaPhoto\\\\pages\\\\index.js\",\n                    lineNumber: 55,\n                    columnNumber: 17\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Kristin\\\\NatashaPhoto\\\\pages\\\\index.js\",\n                lineNumber: 54,\n                columnNumber: 13\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_photo_album__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                layout: \"masonry\",\n                photos: photos\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Kristin\\\\NatashaPhoto\\\\pages\\\\index.js\",\n                lineNumber: 58,\n                columnNumber: 13\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                id: \"about\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Kristin\\\\NatashaPhoto\\\\pages\\\\index.js\",\n                lineNumber: 60,\n                columnNumber: 13\n            }, this)\n        ]\n    }, void 0, true);\n};\n_c = Homepage;\nvar _c;\n$RefreshReg$(_c, \"Homepage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFnRDtBQUNwQjtBQUNFO0FBQ0Y7QUFDa0M7QUFDTDtBQUNmO0FBRUQ7QUFDTztBQUNBO0FBRWhELElBQU1ZLE1BQU0sR0FBRztJQUNYO1FBQ0lDLEdBQUcsRUFBRSw2QkFBNkI7UUFDbENDLEtBQUssRUFBRSxJQUFJO1FBQ1hDLE1BQU0sRUFBRSxJQUFJO0tBQ2Y7SUFDRDtRQUNJRixHQUFHLEVBQUUsNkJBQTZCO1FBQ2xDQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxNQUFNLEVBQUUsSUFBSTtLQUNmO0lBQ0Q7UUFDSUYsR0FBRyxFQUFFLDZCQUE2QjtRQUNsQ0MsS0FBSyxFQUFFLElBQUk7UUFDWEMsTUFBTSxFQUFFLElBQUk7S0FDZjtJQUNEO1FBQ0lGLEdBQUcsRUFBRSw2QkFBNkI7UUFDbENDLEtBQUssRUFBRSxJQUFJO1FBQ1hDLE1BQU0sRUFBRSxJQUFJO0tBQ2Y7SUFDRDtRQUNJRixHQUFHLEVBQUUsNkJBQTZCO1FBQ2xDQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxNQUFNLEVBQUUsSUFBSTtLQUNmO0lBQ0Q7UUFDSUYsR0FBRyxFQUFFLDZCQUE2QjtRQUNsQ0MsS0FBSyxFQUFFLElBQUk7UUFDWEMsTUFBTSxFQUFFLElBQUk7S0FDZjtJQUNEO1FBQ0lGLEdBQUcsRUFBRSw2QkFBNkI7UUFDbENDLEtBQUssRUFBRSxJQUFJO1FBQ1hDLE1BQU0sRUFBRSxJQUFJO0tBQ2Y7Q0FDSjtBQUVjLFNBQVNDLFFBQVEsR0FBRztJQUMvQixxQkFDSTs7MEJBQ0ksOERBQUNYLGtEQUFJOzBCQUNELDRFQUFDWSxPQUFLOzhCQUFDLHFCQUFtQjs7Ozs7d0JBQVE7Ozs7O29CQUMvQjswQkFFUCw4REFBQ1QseURBQVU7Z0JBQUNVLE1BQU0sRUFBQyxTQUFTO2dCQUFDTixNQUFNLEVBQUVBLE1BQU07Ozs7O29CQUFJOzBCQUUvQyw4REFBQ08sU0FBTztnQkFBQ0MsRUFBRSxFQUFDLE9BQU87Ozs7O29CQUFXOztvQkFDL0IsQ0FDTjtDQUNKO0FBWnVCSixLQUFBQSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3BhZ2VzL2luZGV4LmpzP2JlZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIENvbXBvbmVudH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcclxuaW1wb3J0IEltYWdlIGZyb20gJ25leHQvaW1hZ2UnXHJcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCdcclxuaW1wb3J0IHtGb250QXdlc29tZUljb259IGZyb20gJ0Bmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZSdcclxuaW1wb3J0IHtmYUJhcnMgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMnXHJcbmltcG9ydCBQaG90b0FsYnVtIGZyb20gJ3JlYWN0LXBob3RvLWFsYnVtJ1xyXG5cclxuaW1wb3J0IExheW91dCBmcm9tICcuLi9jb21wb25lbnRzL2xheW91dCdcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi9zdHlsZXMvaW5kZXgubW9kdWxlLnNjc3MnXHJcbmltcG9ydCBwaWMyIGZyb20gJy4uL3B1YmxpYy9pbWFnZXMvRFNDXzAwMDYuanBnJ1xyXG5cclxuY29uc3QgcGhvdG9zID0gW1xyXG4gICAge1xyXG4gICAgICAgIHNyYzogXCIvcHVibGljL2ltYWdlcy9EU0NfMDAwMS5KUEdcIixcclxuICAgICAgICB3aWR0aDogMzg3MixcclxuICAgICAgICBoZWlnaHQ6IDI1OTJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgc3JjOiBcIi9wdWJsaWMvaW1hZ2VzL0RTQ18wMDA2LkpQR1wiLFxyXG4gICAgICAgIHdpZHRoOiAyNTkyLFxyXG4gICAgICAgIGhlaWdodDogMjU5MlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBzcmM6IFwiL3B1YmxpYy9pbWFnZXMvRFNDXzAwMDkuSlBHXCIsXHJcbiAgICAgICAgd2lkdGg6IDI1OTIsXHJcbiAgICAgICAgaGVpZ2h0OiAzODcyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHNyYzogXCIvcHVibGljL2ltYWdlcy9EU0NfMDAyMi5KUEdcIixcclxuICAgICAgICB3aWR0aDogMzg3MixcclxuICAgICAgICBoZWlnaHQ6IDI1OTJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgc3JjOiBcIi9wdWJsaWMvaW1hZ2VzL0RTQ18wMDI5LkpQR1wiLFxyXG4gICAgICAgIHdpZHRoOiAyNTkyLFxyXG4gICAgICAgIGhlaWdodDogMzg3MlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBzcmM6IFwiL3B1YmxpYy9pbWFnZXMvRFNDXzAwNTEuSlBHXCIsXHJcbiAgICAgICAgd2lkdGg6IDI1OTIsXHJcbiAgICAgICAgaGVpZ2h0OiAyNTkyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHNyYzogXCIvcHVibGljL2ltYWdlcy9EU0NfMDA3OC5KUEdcIixcclxuICAgICAgICB3aWR0aDogMjU5MixcclxuICAgICAgICBoZWlnaHQ6IDM4NzJcclxuICAgIH1cclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWVwYWdlKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8SGVhZD5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT5OYXRhc2hhIFBob3RvZ3JhcGh5PC90aXRsZT5cclxuICAgICAgICAgICAgPC9IZWFkPlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPFBob3RvQWxidW0gbGF5b3V0PVwibWFzb25yeVwiIHBob3Rvcz17cGhvdG9zfSAvPlxyXG5cclxuICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJhYm91dFwiPjwvc2VjdGlvbj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufSJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwiQ29tcG9uZW50IiwiTGluayIsIkltYWdlIiwiSGVhZCIsIkZvbnRBd2Vzb21lSWNvbiIsImZhQmFycyIsIlBob3RvQWxidW0iLCJMYXlvdXQiLCJzdHlsZXMiLCJwaWMyIiwicGhvdG9zIiwic3JjIiwid2lkdGgiLCJoZWlnaHQiLCJIb21lcGFnZSIsInRpdGxlIiwibGF5b3V0Iiwic2VjdGlvbiIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ }),

/***/ "./node_modules/react-photo-album/dist/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-photo-album/dist/index.esm.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PhotoAlbum\": function() { return /* binding */ PhotoAlbum; },\n/* harmony export */   \"default\": function() { return /* binding */ PhotoAlbum; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nconst ratio = ({ width, height }) => width / height;\n\nconst round = (value, decimals = 0) => {\r\n    const factor = 10 ** decimals;\r\n    return Math.round((value + Number.EPSILON) * factor) / factor;\r\n};\n\nconst RankingFunctionComparator = (rank) => (a, b) => rank(b) - rank(a);\r\nconst MinHeap = (comparator) => {\r\n    const heap = [];\r\n    const compare = comparator;\r\n    let n = 0;\r\n    const greater = (i, j) => compare(heap[i], heap[j]) < 0;\r\n    const swap = (i, j) => {\r\n        const temp = heap[i];\r\n        heap[i] = heap[j];\r\n        heap[j] = temp;\r\n    };\r\n    const swim = (k) => {\r\n        let k2 = k >> 1;\r\n        while (k > 1 && greater(k2, k)) {\r\n            swap(k2, k);\r\n            k = k2;\r\n            k2 = k >> 1;\r\n        }\r\n    };\r\n    const sink = (k) => {\r\n        let j = k << 1;\r\n        while (j <= n) {\r\n            if (j < n && greater(j, j + 1))\r\n                j++;\r\n            if (!greater(k, j))\r\n                break;\r\n            swap(k, j);\r\n            k = j;\r\n            j = k << 1;\r\n        }\r\n    };\r\n    return {\r\n        push: (element) => {\r\n            n += 1;\r\n            heap[n] = element;\r\n            swim(n);\r\n        },\r\n        pop: () => {\r\n            if (n === 0)\r\n                return undefined;\r\n            swap(1, n);\r\n            n -= 1;\r\n            const max = heap.pop();\r\n            sink(1);\r\n            return max;\r\n        },\r\n        size: () => n,\r\n    };\r\n};\n\nconst buildPrecedentsMap = (graph, startNode, endNode) => {\r\n    const precedentsMap = {};\r\n    const visited = {};\r\n    const storedShortestPaths = {};\r\n    storedShortestPaths[startNode] = 0;\r\n    const pQueue = MinHeap(RankingFunctionComparator((el) => el.weight));\r\n    pQueue.push({ id: startNode, weight: 0 });\r\n    let shortestNode;\r\n    while ((shortestNode = pQueue.pop()) !== undefined) {\r\n        const shortestNodeId = shortestNode.id;\r\n        if (visited[shortestNodeId])\r\n            continue;\r\n        const neighboringNodes = graph(shortestNodeId);\r\n        visited[shortestNodeId] = 1;\r\n        for (const neighbor in neighboringNodes) {\r\n            const newTotalWeight = shortestNode.weight + neighboringNodes[neighbor];\r\n            if (storedShortestPaths[neighbor] === undefined ||\r\n                (storedShortestPaths[neighbor] > newTotalWeight &&\r\n                    (storedShortestPaths[neighbor] / newTotalWeight > 1.005 ||\r\n                        precedentsMap[neighbor] < shortestNodeId))) {\r\n                storedShortestPaths[neighbor] = newTotalWeight;\r\n                pQueue.push({ id: neighbor, weight: newTotalWeight });\r\n                precedentsMap[neighbor] = shortestNodeId;\r\n            }\r\n        }\r\n    }\r\n    if (typeof storedShortestPaths[endNode] === \"undefined\") {\r\n        return undefined;\r\n    }\r\n    return precedentsMap;\r\n};\r\nconst getPathFromPrecedentsMap = (precedentsMap, endNode) => {\r\n    const nodes = [];\r\n    let n = endNode;\r\n    while (n) {\r\n        nodes.push(n);\r\n        n = precedentsMap[n];\r\n    }\r\n    return nodes.reverse();\r\n};\r\nconst findShortestPath = (graph, startNode, endNode) => {\r\n    const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\r\n    return precedentsMap !== undefined ? getPathFromPrecedentsMap(precedentsMap, endNode) : undefined;\r\n};\n\nconst findIdealNodeSearch = ({ photos, targetRowHeight, containerWidth, }) => {\r\n    const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\r\n    return round(containerWidth / targetRowHeight / minRatio) + 2;\r\n};\r\nconst getCommonHeight = (row, containerWidth, spacing, padding) => {\r\n    const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\r\n    const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\r\n    return rowWidth / totalAspectRatio;\r\n};\r\nconst cost = (photos, i, j, width, targetRowHeight, spacing, padding) => {\r\n    const row = photos.slice(i, j);\r\n    const commonHeight = getCommonHeight(row, width, spacing, padding);\r\n    return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : undefined;\r\n};\r\nconst makeGetNeighbors$1 = ({ photos, layoutOptions, targetRowHeight, limitNodeSearch, rowConstraints, instrumentation, }) => (node) => {\r\n    var _a, _b;\r\n    const { containerWidth, spacing, padding } = layoutOptions;\r\n    const results = {};\r\n    const start = +node;\r\n    results[+start] = 0;\r\n    const startOffset = (_a = rowConstraints === null || rowConstraints === void 0 ? void 0 : rowConstraints.minPhotos) !== null && _a !== void 0 ? _a : 1;\r\n    const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints === null || rowConstraints === void 0 ? void 0 : rowConstraints.maxPhotos) !== null && _b !== void 0 ? _b : Infinity);\r\n    for (let i = start + startOffset; i < photos.length + 1; i += 1) {\r\n        if (i - start > endOffset && !(instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.fullGraphSearch))\r\n            break;\r\n        const currentCost = cost(photos, start, i, containerWidth, targetRowHeight, spacing, padding);\r\n        if (currentCost === undefined)\r\n            break;\r\n        results[i.toString()] = currentCost;\r\n    }\r\n    return results;\r\n};\r\nconst computeRowsLayout = ({ photos, layoutOptions, instrumentation, }) => {\r\n    var _a, _b;\r\n    const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\r\n    (_a = instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.onStartLayoutComputation) === null || _a === void 0 ? void 0 : _a.call(instrumentation);\r\n    const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\r\n    const getNeighbors = makeGetNeighbors$1({\r\n        photos,\r\n        layoutOptions,\r\n        targetRowHeight,\r\n        limitNodeSearch,\r\n        rowConstraints,\r\n        instrumentation,\r\n    });\r\n    const path = findShortestPath(getNeighbors, \"0\", `${photos.length}`);\r\n    if (path === undefined)\r\n        return undefined;\r\n    const result = [];\r\n    for (let i = 1; i < path.length; i += 1) {\r\n        const row = photos.map((photo, index) => ({ photo, index })).slice(+path[i - 1], +path[i]);\r\n        const height = getCommonHeight(row.map(({ photo }) => photo), containerWidth, spacing, padding);\r\n        result.push(row.map(({ photo, index }, photoIndex) => ({\r\n            photo,\r\n            layout: {\r\n                height,\r\n                width: height * ratio(photo),\r\n                index,\r\n                photoIndex,\r\n                photosCount: row.length,\r\n            },\r\n        })));\r\n    }\r\n    (_b = instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.onFinishLayoutComputation) === null || _b === void 0 ? void 0 : _b.call(instrumentation, result);\r\n    return result;\r\n};\n\nconst calcWidth = (base, { width, photosCount }, { spacing, padding, containerWidth }) => {\r\n    const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\r\n    return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\r\n};\r\nconst cssWidth$1 = (layout, layoutOptions) => {\r\n    if (layoutOptions.layout !== \"rows\") {\r\n        return `calc(100% - ${2 * layoutOptions.padding}px)`;\r\n    }\r\n    return calcWidth(\"100%\", layout, layoutOptions);\r\n};\r\nconst calculateSizesValue = (size, layout, layoutOptions) => { var _a, _b; return calcWidth((_b = (_a = size.match(/calc\\((.*)\\)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : size, layout, layoutOptions); };\r\nconst srcSetAndSizes = (photo, layout, layoutOptions) => {\r\n    let srcSet, sizes;\r\n    if (photo.images && photo.images.length > 0) {\r\n        srcSet = photo.images\r\n            .concat([\r\n            {\r\n                src: photo.src,\r\n                width: photo.width,\r\n                height: photo.height,\r\n            },\r\n        ])\r\n            .sort((first, second) => first.width - second.width)\r\n            .map((image) => `${image.src} ${image.width}w`)\r\n            .join(\", \");\r\n    }\r\n    if (layoutOptions.sizes) {\r\n        sizes = (layoutOptions.sizes.sizes || [])\r\n            .map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`)\r\n            .concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions))\r\n            .join(\", \");\r\n    }\r\n    else {\r\n        sizes = `${Math.ceil((layout.width / (layoutOptions.viewportWidth || layoutOptions.containerWidth)) * 100)}vw`;\r\n    }\r\n    return { srcSet, sizes };\r\n};\r\nconst defaultRenderPhoto = ({ imageProps }) => {\r\n    const { src, alt, srcSet, sizes, ...rest } = imageProps;\r\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: src, alt: alt, ...(srcSet ? { srcSet, sizes } : null), ...rest });\r\n};\r\nconst PhotoRenderer = (props) => {\r\n    var _a;\r\n    const { photo, layout, layoutOptions, imageProps: { style, ...restImageProps } = {}, renderPhoto } = props;\r\n    const { onClick } = layoutOptions;\r\n    const imageStyle = {\r\n        display: \"block\",\r\n        boxSizing: \"content-box\",\r\n        width: cssWidth$1(layout, layoutOptions),\r\n        height: \"auto\",\r\n        aspectRatio: `${photo.width} / ${photo.height}`,\r\n        ...(layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null),\r\n        ...((layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") &&\r\n            layout.photoIndex < layout.photosCount - 1\r\n            ? { marginBottom: `${layoutOptions.spacing}px` }\r\n            : null),\r\n        ...(onClick ? { cursor: \"pointer\" } : null),\r\n        ...style,\r\n    };\r\n    const handleClick = onClick\r\n        ? (event) => {\r\n            onClick(event, photo, layout.index);\r\n        }\r\n        : undefined;\r\n    const imageProps = {\r\n        src: photo.src,\r\n        alt: (_a = photo.alt) !== null && _a !== void 0 ? _a : \"\",\r\n        title: photo.title,\r\n        onClick: handleClick,\r\n        style: imageStyle,\r\n        className: \"react-photo-album--photo\",\r\n        ...srcSetAndSizes(photo, layout, layoutOptions),\r\n        ...restImageProps,\r\n    };\r\n    return (renderPhoto !== null && renderPhoto !== void 0 ? renderPhoto : defaultRenderPhoto)({ photo, layout, layoutOptions, imageProps });\r\n};\n\nconst defaultRenderRowContainer = ({ rowContainerProps, children, }) => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ...rowContainerProps, children: children });\r\nconst RowContainerRenderer = (props) => {\r\n    const { layoutOptions, rowIndex, rowsCount, renderRowContainer, rowContainerProps: { style, ...restRowContainerProps } = {}, children, } = props;\r\n    const rowContainerProps = {\r\n        className: \"react-photo-album--row\",\r\n        style: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"nowrap\",\r\n            alignItems: \"flex-start\",\r\n            justifyContent: \"space-between\",\r\n            ...(rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null),\r\n            ...style,\r\n        },\r\n        ...restRowContainerProps,\r\n    };\r\n    return (renderRowContainer !== null && renderRowContainer !== void 0 ? renderRowContainer : defaultRenderRowContainer)({\r\n        layoutOptions,\r\n        rowIndex,\r\n        rowsCount,\r\n        rowContainerProps,\r\n        children,\r\n    });\r\n};\n\nconst RowsLayout = (props) => {\r\n    const { photos, layoutOptions, renderPhoto, renderRowContainer, componentsProps, instrumentation } = props;\r\n    const rowsLayout = computeRowsLayout({ photos, layoutOptions, instrumentation });\r\n    if (rowsLayout === undefined)\r\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {});\r\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: rowsLayout.map((row, rowIndex) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RowContainerRenderer, { layoutOptions: layoutOptions, rowIndex: rowIndex, rowsCount: rowsLayout.length, renderRowContainer: renderRowContainer, rowContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.rowContainerProps, children: row.map(({ photo, layout }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PhotoRenderer, { photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }, photo.key || photo.src))) }, `row-${rowIndex}`))) }));\r\n};\n\nconst computeShortestPath = (graph, pathLength, startNode, endNode) => {\r\n    const comp = [];\r\n    const queue = { 0: { [startNode]: null } };\r\n    for (let length = 0; length < pathLength; length += 1) {\r\n        Object.keys(queue[length]).forEach((n) => {\r\n            const node = +n;\r\n            const accumulatedWeight = length > 0 && comp[node][length] ? comp[node][length][1] : 0;\r\n            graph(node).forEach(({ neighbor, weight }) => {\r\n                if (!comp[neighbor]) {\r\n                    comp[neighbor] = [];\r\n                }\r\n                const newTotalWeight = accumulatedWeight + weight;\r\n                if (!comp[neighbor][length + 1] ||\r\n                    (comp[neighbor][length + 1][1] > newTotalWeight &&\r\n                        (comp[neighbor][length + 1][1] / newTotalWeight > 1.0001 ||\r\n                            node < comp[neighbor][length + 1][0]))) {\r\n                    comp[neighbor][length + 1] = [node, newTotalWeight];\r\n                }\r\n                if (length < pathLength - 1 && neighbor !== endNode) {\r\n                    if (!queue[length + 1]) {\r\n                        queue[length + 1] = {};\r\n                    }\r\n                    queue[length + 1][neighbor] = null;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return comp;\r\n};\r\nconst reconstructShortestPath = (comp, pathLength, endNode) => {\r\n    const path = [endNode];\r\n    for (let node = endNode, length = pathLength; length > 0; length -= 1) {\r\n        const [prevNode] = comp[node][length];\r\n        node = prevNode;\r\n        path.push(node);\r\n    }\r\n    return path.reverse();\r\n};\r\nconst findShortestPathLengthN = (graph, pathLength, startNode, endNode) => reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n\nconst makeGetNeighbors = ({ photos, spacing, padding, targetColumnWidth, targetColumnHeight, instrumentation, }) => (node) => {\r\n    const results = [];\r\n    const cutOffHeight = targetColumnHeight * 1.5;\r\n    let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\r\n    for (let i = node + 1; i < photos.length + 1; i += 1) {\r\n        results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\r\n        if ((height > cutOffHeight && !(instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.fullGraphSearch)) || i === photos.length) {\r\n            break;\r\n        }\r\n        height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\r\n    }\r\n    return results;\r\n};\r\nconst buildColumnsModel = ({ path, photos, containerWidth, columnsGaps, columnsRatios, spacing, padding, }) => {\r\n    const columnsModel = [];\r\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\r\n    for (let i = 0; i < path.length - 1; i += 1) {\r\n        const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\r\n        const totalAdjustedGaps = columnsRatios.reduce((acc, ratio, index) => acc + (columnsGaps[i] - columnsGaps[index]) * ratio, 0);\r\n        const columnWidth = ((containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) *\r\n            columnsRatios[i]) /\r\n            totalRatio;\r\n        columnsModel.push(column.map(({ photo, index }, photoIndex) => ({\r\n            photo,\r\n            layout: {\r\n                width: columnWidth,\r\n                height: columnWidth / ratio(photo),\r\n                index,\r\n                photoIndex,\r\n                photosCount: column.length,\r\n            },\r\n        })));\r\n    }\r\n    return columnsModel;\r\n};\r\nconst computeColumnsModel = ({ photos, layoutOptions, targetColumnWidth, instrumentation, }) => {\r\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\r\n    const columnsGaps = [];\r\n    const columnsRatios = [];\r\n    if (photos.length <= columns) {\r\n        for (let index = 0; index < photos.length; index += 1) {\r\n            columnsGaps[index] = 2 * padding;\r\n            columnsRatios[index] = ratio(photos[index]);\r\n        }\r\n        const columnsModel = buildColumnsModel({\r\n            path: Array.from({ length: photos.length + 1 }).map((_, index) => index),\r\n            photos,\r\n            columnsRatios,\r\n            columnsGaps,\r\n            containerWidth,\r\n            spacing,\r\n            padding,\r\n        });\r\n        return { columnsGaps, columnsRatios, columnsModel };\r\n    }\r\n    const targetColumnHeight = (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) +\r\n        spacing * (photos.length - columns) +\r\n        2 * padding * photos.length) /\r\n        columns;\r\n    const getNeighbors = makeGetNeighbors({\r\n        photos,\r\n        targetColumnWidth,\r\n        targetColumnHeight,\r\n        spacing,\r\n        padding,\r\n        instrumentation,\r\n    });\r\n    const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length).map((node) => +node);\r\n    for (let i = 0; i < path.length - 1; i += 1) {\r\n        const column = photos.slice(path[i], path[i + 1]);\r\n        columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\r\n        columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\r\n    }\r\n    const columnsModel = buildColumnsModel({\r\n        path,\r\n        photos,\r\n        columnsRatios,\r\n        columnsGaps,\r\n        containerWidth,\r\n        spacing,\r\n        padding,\r\n    });\r\n    return { columnsGaps, columnsRatios, columnsModel };\r\n};\r\nconst computeLayout = (props) => {\r\n    const { photos, layoutOptions, instrumentation } = props;\r\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\r\n    const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\r\n    const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\r\n        photos,\r\n        layoutOptions,\r\n        targetColumnWidth,\r\n        instrumentation,\r\n    });\r\n    if (columnsModel.findIndex((columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0) >= 0) {\r\n        if (columns > 1) {\r\n            return computeLayout({\r\n                photos,\r\n                layoutOptions: {\r\n                    ...layoutOptions,\r\n                    columns: columns - 1,\r\n                },\r\n                instrumentation,\r\n            });\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    return { columnsModel, columnsGaps, columnsRatios };\r\n};\r\nconst computeColumnsLayout = ({ photos, layoutOptions, instrumentation, }) => {\r\n    var _a, _b;\r\n    (_a = instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.onStartLayoutComputation) === null || _a === void 0 ? void 0 : _a.call(instrumentation);\r\n    const result = computeLayout({\r\n        photos,\r\n        layoutOptions: {\r\n            ...layoutOptions,\r\n            columns: Math.min(layoutOptions.columns, photos.length),\r\n        },\r\n        instrumentation,\r\n    });\r\n    (_b = instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.onFinishLayoutComputation) === null || _b === void 0 ? void 0 : _b.call(instrumentation, result);\r\n    return result;\r\n};\n\nconst defaultRenderColumnContainer = ({ columnContainerProps, children, }) => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ...columnContainerProps, children: children });\r\nconst cssWidth = (props) => {\r\n    const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\r\n    const { layout, spacing, padding } = layoutOptions;\r\n    if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\r\n        return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\r\n    }\r\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\r\n    const totalAdjustedGaps = columnsRatios.reduce((acc, ratio, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio, 0);\r\n    return `calc((100% - ${round((columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps, 3)}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\r\n};\r\nconst ColumnContainerRenderer = (props) => {\r\n    const { layoutOptions, renderColumnContainer, children, columnContainerProps: { style, ...restColumnContainerProps } = {}, ...rest } = props;\r\n    const columnContainerProps = {\r\n        className: \"react-photo-album--column\",\r\n        style: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            flexWrap: \"nowrap\",\r\n            alignItems: \"flex-start\",\r\n            width: cssWidth(props),\r\n            justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\r\n            ...style,\r\n        },\r\n        ...restColumnContainerProps,\r\n    };\r\n    return (renderColumnContainer !== null && renderColumnContainer !== void 0 ? renderColumnContainer : defaultRenderColumnContainer)({\r\n        layoutOptions,\r\n        columnContainerProps,\r\n        children,\r\n        ...rest,\r\n    });\r\n};\n\nconst ColumnsLayout = (props) => {\r\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps, instrumentation } = props;\r\n    const columnsLayout = computeColumnsLayout({ photos, layoutOptions, instrumentation });\r\n    if (columnsLayout === undefined)\r\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {});\r\n    const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\r\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: columnsModel.map((column, columnIndex) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ColumnContainerRenderer, { layoutOptions: layoutOptions, columnIndex: columnIndex, columnsCount: columnsModel.length, columnsGaps: columnsGaps, columnsRatios: columnsRatios, renderColumnContainer: renderColumnContainer, columnContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.columnContainerProps, children: column.map(({ photo, layout }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PhotoRenderer, { photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }, photo.key || photo.src))) }, `column-${columnIndex}`))) }));\r\n};\n\nconst computeMasonryLayout = (props) => {\r\n    var _a, _b;\r\n    const { photos, layoutOptions, instrumentation } = props;\r\n    const { spacing, padding, containerWidth } = layoutOptions;\r\n    const columns = Math.min(layoutOptions.columns, photos.length);\r\n    (_a = instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.onStartLayoutComputation) === null || _a === void 0 ? void 0 : _a.call(instrumentation);\r\n    const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\r\n    if (columnWidth <= 0) {\r\n        return columns > 1\r\n            ? computeMasonryLayout({\r\n                ...props,\r\n                layoutOptions: { ...layoutOptions, columns: columns - 1 },\r\n            })\r\n            : undefined;\r\n    }\r\n    const columnsCurrentTopPositions = [];\r\n    for (let i = 0; i < columns; i += 1) {\r\n        columnsCurrentTopPositions[i] = 0;\r\n    }\r\n    const columnsModel = photos.reduce((acc, photo, index) => {\r\n        const shortestColumn = columnsCurrentTopPositions.reduce((acc, item, i) => item < columnsCurrentTopPositions[acc] - 1 ? i : acc, 0);\r\n        columnsCurrentTopPositions[shortestColumn] =\r\n            columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\r\n        if (!acc[shortestColumn]) {\r\n            acc[shortestColumn] = [];\r\n        }\r\n        acc[shortestColumn].push({ photo, index });\r\n        return acc;\r\n    }, []);\r\n    const result = columnsModel.map((column) => column.map(({ photo, index }, photoIndex) => ({\r\n        photo,\r\n        layout: {\r\n            width: columnWidth,\r\n            height: columnWidth / ratio(photo),\r\n            index,\r\n            photoIndex,\r\n            photosCount: column.length,\r\n        },\r\n    })));\r\n    (_b = instrumentation === null || instrumentation === void 0 ? void 0 : instrumentation.onFinishLayoutComputation) === null || _b === void 0 ? void 0 : _b.call(instrumentation, result);\r\n    return result;\r\n};\n\nconst MasonryLayout = (props) => {\r\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps, instrumentation } = props;\r\n    const masonryLayout = computeMasonryLayout({ photos, layoutOptions, instrumentation });\r\n    if (masonryLayout === undefined)\r\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {});\r\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: masonryLayout.map((column, columnIndex) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ColumnContainerRenderer, { layoutOptions: layoutOptions, columnsCount: masonryLayout.length, columnIndex: columnIndex, renderColumnContainer: renderColumnContainer, columnContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.columnContainerProps, children: column.map(({ photo, layout }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PhotoRenderer, { photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }, photo.key || photo.src))) }, `masonry-column-${columnIndex}`))) }));\r\n};\n\nconst defaultRenderContainer = ({ containerProps, children, containerRef, }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: containerRef, ...containerProps, children: children }));\r\nconst ContainerRenderer = (props) => {\r\n    const { layoutOptions, renderContainer, children, containerRef, containerProps: { style, ...restContainerProps } = {}, } = props;\r\n    const { layout } = layoutOptions;\r\n    const containerProps = {\r\n        className: `react-photo-album react-photo-album--${layout}`,\r\n        style: {\r\n            display: \"flex\",\r\n            flexWrap: \"nowrap\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: layout === \"rows\" ? \"column\" : \"row\",\r\n            ...style,\r\n        },\r\n        ...restContainerProps,\r\n    };\r\n    if (renderContainer && typeof renderContainer === \"object\") {\r\n        const Component = renderContainer;\r\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Component, { ref: containerRef, layoutOptions: layoutOptions, containerProps: containerProps, children: children }));\r\n    }\r\n    return (renderContainer !== null && renderContainer !== void 0 ? renderContainer : defaultRenderContainer)({\r\n        containerProps,\r\n        containerRef,\r\n        layoutOptions,\r\n        children,\r\n    });\r\n};\n\nconst useIsomorphicEffect = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\n\nconst arraysEqual = (a, b) => {\r\n    if (!a || !b || a.length !== b.length)\r\n        return false;\r\n    for (let i = 0, l = a.length; i < l; i++) {\r\n        if (a[i] !== b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst useArray = (array) => {\r\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(array);\r\n    if (!arraysEqual(array, ref.current)) {\r\n        ref.current = array;\r\n    }\r\n    return ref.current;\r\n};\n\nconst useContainerWidth = (resizeObserverProvider, breakpoints) => {\r\n    const observerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\r\n    const breakpointsArray = useArray(breakpoints);\r\n    const [containerWidth, setContainerWidth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\r\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((node) => {\r\n        var _a;\r\n        if (observerRef.current) {\r\n            observerRef.current.disconnect();\r\n            observerRef.current = undefined;\r\n        }\r\n        const updateWidth = () => {\r\n            let newWidth = node === null || node === void 0 ? void 0 : node.clientWidth;\r\n            if (newWidth !== undefined && breakpointsArray && breakpointsArray.length > 0) {\r\n                const sortedBreakpoints = [...breakpointsArray.filter((x) => x > 0)].sort((a, b) => b - a);\r\n                sortedBreakpoints.push(Math.floor(sortedBreakpoints[sortedBreakpoints.length - 1] / 2));\r\n                const threshold = newWidth;\r\n                newWidth = sortedBreakpoints.find((breakpoint, index) => breakpoint <= threshold || index === sortedBreakpoints.length - 1);\r\n            }\r\n            setContainerWidth(newWidth);\r\n        };\r\n        updateWidth();\r\n        if (node) {\r\n            observerRef.current =\r\n                typeof ResizeObserver !== \"undefined\"\r\n                    ? new ResizeObserver(updateWidth)\r\n                    : resizeObserverProvider === null || resizeObserverProvider === void 0 ? void 0 : resizeObserverProvider(updateWidth);\r\n            (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.observe(node);\r\n        }\r\n    }, [resizeObserverProvider, breakpointsArray]);\r\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({ containerRef, containerWidth }), [containerRef, containerWidth]);\r\n};\n\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\r\nconst unwrap = (value, containerWidth) => typeof value === \"function\" ? value(containerWidth) : value;\r\nconst unwrapParameter = (value, containerWidth) => typeof value !== \"undefined\" ? unwrap(value, containerWidth) : undefined;\r\nconst selectResponsiveValue = (values, containerWidth) => {\r\n    const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\r\n    return unwrap(values[index >= 0 ? index : 0], containerWidth);\r\n};\r\nconst resolveResponsiveParameter = (parameter, containerWidth, values) => {\r\n    const value = unwrapParameter(parameter, containerWidth);\r\n    return value === undefined ? selectResponsiveValue(values, containerWidth) : value;\r\n};\n\nconst resolveLayoutOptions = ({ layout, onClick, viewportWidth, containerWidth, targetRowHeight, rowConstraints, columns, spacing, padding, sizes, }) => ({\r\n    layout,\r\n    onClick,\r\n    viewportWidth,\r\n    containerWidth,\r\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2]),\r\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\r\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\r\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\r\n        (w) => w / 5,\r\n        (w) => w / 4,\r\n        (w) => w / 3,\r\n        (w) => w / 2,\r\n    ]),\r\n    sizes,\r\n    rowConstraints,\r\n});\r\nconst resolveComponentsProps = (componentsProps, containerWidth) => {\r\n    return typeof componentsProps === \"function\" ? componentsProps(containerWidth) : componentsProps;\r\n};\r\nconst PhotoAlbum = (props) => {\r\n    const { photos, layout, renderPhoto, renderContainer, renderRowContainer, renderColumnContainer, defaultContainerWidth, resizeObserverProvider, breakpoints, instrumentation, } = props;\r\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\r\n    const { containerRef, containerWidth } = useContainerWidth(resizeObserverProvider, breakpoints);\r\n    useIsomorphicEffect(() => setMounted(true), []);\r\n    if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos))\r\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {});\r\n    const layoutOptions = resolveLayoutOptions({\r\n        containerWidth: (mounted && containerWidth) || defaultContainerWidth || 800,\r\n        viewportWidth: (mounted && window.innerWidth) || undefined,\r\n        ...props,\r\n    });\r\n    const componentsProps = resolveComponentsProps(props.componentsProps, layoutOptions.containerWidth);\r\n    const commonLayoutProps = { photos, renderPhoto, componentsProps, instrumentation };\r\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ContainerRenderer, { containerRef: containerRef, layoutOptions: layoutOptions, renderContainer: renderContainer, containerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.containerProps, children: layout === \"rows\" ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RowsLayout, { layoutOptions: layoutOptions, renderRowContainer: renderRowContainer, ...commonLayoutProps })) : layout === \"columns\" ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ColumnsLayout, { layoutOptions: layoutOptions, renderColumnContainer: renderColumnContainer, ...commonLayoutProps })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MasonryLayout, { layoutOptions: layoutOptions, renderColumnContainer: renderColumnContainer, ...commonLayoutProps })) }));\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-photo-album/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nvar jsxs =  jsxWithValidationStatic ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsx;\nexports.jsxs = jsxs;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-runtime.development.js\n");

/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLCtJQUFrRTtBQUNwRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanM/MzRkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-runtime.js\n");

/***/ })

});